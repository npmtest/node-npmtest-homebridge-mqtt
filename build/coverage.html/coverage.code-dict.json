{"/home/travis/build/npmtest/node-npmtest-homebridge-mqtt/test.js":"/* istanbul instrument in package npmtest_homebridge_mqtt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-mqtt/lib.npmtest_homebridge_mqtt.js":"/* istanbul instrument in package npmtest_homebridge_mqtt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_mqtt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_mqtt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-mqtt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-mqtt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_mqtt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_mqtt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_mqtt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_mqtt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_mqtt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_mqtt.__dirname + '/lib.npmtest_homebridge_mqtt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-mqtt/node_modules/homebridge-mqtt/index.js":"'use strict';\n\nvar Utils = require('./lib/utils.js').Utils;\nvar Controller = require('./lib/controller.js').Controller;\n\nvar HapAccessory, Service, Characteristic, UUIDGen;\nvar cachedAccessories = 0;\n\nvar platform_name = \"mqtt\";\nvar plugin_name = \"homebridge-\" + platform_name;\nvar storagePath;\nvar plugin_version;\n\nmodule.exports = function(homebridge) {\n  console.log(\"homebridge API version: \" + homebridge.version);\n  \n  HapAccessory = homebridge.platformAccessory;\n  \n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n  UUIDGen = homebridge.hap.uuid; // Universally Unique IDentifier\n  storagePath = homebridge.user.storagePath();\n    \n  homebridge.registerPlatform(plugin_name, platform_name, PluginPlatform, true);\n}\n\nfunction PluginPlatform(log, config, api) {\n\n  this.log = log;\n  \n  if (typeof(config) === \"undefined\" || config === null) {\n    this.log.error(\"config undefined or null!\");\n    this.log(\"storagePath = %s\", storagePath);\n    process.exit(1);\n  }\n  \n  plugin_version = Utils.readPluginVersion();\n  this.log(\"%s v%s\", plugin_name, plugin_version);\n  \n  Utils.read_npmVersion(plugin_name, function(npm_version) {\n    if (npm_version > plugin_version) {\n      this.log(\"A new version %s is avaiable\", npm_version);\n    }\n  }.bind(this));\n  \n  this.log.debug(\"storagePath = %s\", storagePath);\n  this.log.debug(\"config = %s\", JSON.stringify(config));\n  \n  var c_parameters = {\n    \"config\": config,\n    \"log\": this.log,\n    \"plugin_name\": plugin_name,\n    \"plugin_version\": plugin_version,\n    \"platform_name\": platform_name,\n    \"api\": api,\n    \"HapAccessory\": HapAccessory,\n    \"Characteristic\": Characteristic,\n    \"Service\": Service,\n    \"UUIDGen\": UUIDGen\n  }\n  \n  this.controller = new Controller(c_parameters);\n\n  if (api) {\n\n    api.on('didFinishLaunching', function() {\n      this.log(\"Number of cached Accessories: %s\", cachedAccessories);\n      \n      this.controller.start();      \n    }.bind(this));\n  }\n}\n\nPluginPlatform.prototype.configureAccessory = function(accessory) {\n\n  //this.log.debug(\"configureAccessory %s\", JSON.stringify(accessory, null, 2));\n  cachedAccessories++;\n  \n  this.controller.configureAccessory(accessory);\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-mqtt/node_modules/homebridge-mqtt/lib/utils.js":"'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar request = require('request');\n\nvar plugins_name = \"plugins\";\nvar package_json = \"../package.json\";\nvar plugin_version;\nvar github_version;\nvar npm_version;\n\nmodule.exports = {\n  Utils: Utils\n}\n\nfunction Utils() {\n}\n\nUtils.loadConfig = function(storage_path, plugin_name, config_name) {\n  \n  var plugin_storage_path = path.join(storage_path, plugins_name, plugin_name);\n  var config_path = path.join(plugin_storage_path, config_name);\n  \n  // Complain and exit if config_name doesn't exist yet\n  if (!fs.existsSync(config_path)) {\n      console.log(\"Couldn't find a %s file at %s.\", config_name, plugin_storage_path);\n      process.exit(1);\n  }\n  \n  // Load up the configuration file\n  var config;\n  try {\n    //console.log(\"Utils.loadConfig\");\n    config = JSON.parse(fs.readFileSync(config_path));\n  }\n  catch (err) {\n    console.log(\"There was a problem reading your %s file.\", config_name);\n    console.log(\"Please try pasting your %s file here to validate it: http://jsonlint.com\", config_name);\n    console.log(\"\");\n    throw err;\n  }\n  return config;\n}\n\nUtils.saveConfig = function(storage_path, plugin_name, config_name, data) {\n\n  var plugin_storage_path = path.join(storage_path, plugins_name, plugin_name);\n  var config_path = path.join(plugin_storage_path, config_name); // \"config_test.json\");\n\n  try {\n    //console.log(\"Utils.saveConfig %s\", data);\n    fs.writeFileSync(config_path, JSON.stringify(data, null, 2));\n  }\n  catch (err) {\n    console.log(\"There was a problem writing your %s file.\", config_name);\n    throw err;\n  }\n}\n\nUtils.getHomeKitTypes = function() {\n\n  var uuid, items, service_type;\n  var HomeKitTypes = {};\n  \n  var types_path = path.join(__dirname, '../../hap-nodejs/lib/gen/HomeKitTypes.js');\n  var lines = fs.readFileSync(types_path).toString().split('\\n');\n  var line;\n    \n  for(var k in lines) {\n    line = lines[k];\n    \n    if (line.includes(\"Service.\") && line.includes(\"UUID\")) {\n      items = line.split(\".\");\n      service_type = items[1];\n      uuid = items[2].slice(8,44);\n      //console.log(service_type);\n      //console.log(uuid);\n      HomeKitTypes[uuid] = service_type;\n    }\n  }\n  return HomeKitTypes;\n}\n\nUtils.getPluginVersion = function() {\n  return plugin_version;\n}\n\nUtils.get_npmVersion = function(pkg) {\n  // Update version for the next call\n  this.read_npmVersion(pkg, function(version) {\n    npm_version = version;\n  });\n  return npm_version;\n}\n\nUtils.n2b = function (number) {\n  return (number == 0 || number == false) ? false : true;\n}\n\nUtils.getGitHubVersion = function(pkg, github_url) {\n  this.read_GitHubVersion(pkg, github_url);\n  return github_version;\n}\n\nUtils.readPluginVersion = function() {\n  \n  var packageJSONPath = path.join(__dirname, package_json);\n  var packageJSON = JSON.parse(fs.readFileSync(packageJSONPath));\n  plugin_version = packageJSON.version;\n  return plugin_version;\n}\n\nUtils.read_npmVersion = function(pck, callback) {\n  var exec = require('child_process').exec;\n  var cmd = 'npm view '+pck+' version';\n  exec(cmd, function(error, stdout, stderr) {\n    npm_version = stdout.trim();\n    //npm_version = stdout.replace(/(\\r\\n|\\n|\\r)/gm,\"\");\n    callback(npm_version);\n    //console.log(\"npm_version %s\", npm_version);\n });\n}\n\nUtils.readGitHubVersion = function (pkg, url) {\n  \n  request.get({url: url}, function(err, response, body) {\n    \n    if (!err && response.statusCode == 200) {\n      var package_json = body.trim();\n      //console.log(\"package.json %s\", JSON.stringify(package));\n      var packageJSON = JSON.parse(package_json);\n      github_version = packageJSON.version;\n      if (github_version > plugin_version) {\n        console.log(\"%s a new version %s is avaiable\", pkg, github_version);\n      }\n    }\n    else {\n      console.log(err);\n      if (response) console.log(\"statusCode: %s Message: %s\", response.statusCode, response.statusMessage);\n    }\n  });\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_and_HSV\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns rgb (FFFFFF)\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value (brigthness)\n * @return  HexNumber       The RGB representation\n */\n \nUtils.hsv2rgb = function (h, s, v) {\n\n  //console.log(\"h: %s s: %s v: %s\", h, s, v);\n  var r, g, b;\n  \n  if( s == 0 ) {\n    r = v; g = v; b = v;\n  }\n  else {\n    var i = Math.floor(h * 6);\n    var f = h * 6 - i;\n    var p = v * (1 - s);\n    var q = v * (1 - f * s);\n    var t = v * (1 - (1 - f) * s);\n\n    switch(i % 6){\n      case 0: r = v; g = t; b = p; break;\n      case 1: r = q; g = v; b = p; break;\n      case 2: r = p; g = v; b = t; break;\n      case 3: r = p; g = q; b = v; break;\n      case 4: r = t; g = p; b = v; break;\n      case 5: r = v; g = p; b = q; break;\n    }\n  }\n  r = Math.round(r*255);\n  g = Math.round(g*255);\n  b = Math.round(b*255);\n  //console.log(\"r: %s g: %s b: %s\", r, g, b);\n  return Number(0x1000000 + r*0x10000 + g*0x100 + b).toString(16).substring(1).toUpperCase();\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from https://en.wikipedia.org/wiki/HSL_and_HSV\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\n \nUtils.rgb2hsv = function(r, g, b) {\n\n  r = r/255, g = g/255, b = b/255;\n  var max = Math.max(r, g, b), min = Math.min(r, g, b);\n  var h, s, v = max;\n\n  var d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if(max == min){\n      h = 0; // achromatic\n  } else {\n      switch(max){\n          case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n          case g: h = (b - r) / d + 2; break;\n          case b: h = (r - g) / d + 4; break;\n      }\n      h /= 6;\n  }\n\n  return [h, s, v];\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-mqtt/node_modules/homebridge-mqtt/lib/controller.js":"'use strict';\n\nvar Utils = require('./utils.js').Utils;\nvar Accessory = require('./accessory.js').Accessory;\nvar Model = require('./model.js').Model;\n\nvar config, plugin_name, plugin_version, platform_name;\nvar api, HapAccessory, Service, Characteristic, UUIDGen;\n\nvar accessory_parameters;\n\nmodule.exports = {\n  Controller: Controller\n}\n\nfunction Controller(params) {\n\n  config = params.config;\n  this.log = params.log;\n  plugin_name = params.plugin_name;\n  plugin_version = params.plugin_version;\n  platform_name = params.platform_name; \n  api = params.api; \n  HapAccessory = params.HapAccessory;\n  Service = params.Service;\n  Characteristic = params.Characteristic;\n  UUIDGen = params.UUIDGen;\n\n  this.accessories = {};\n  this.hap_accessories = {};\n  \n  var model_parameters = {\n    \"config\": config,\n    \"log\": this.log,\n    \"plugin_name\": plugin_name,\n    \"Characteristic\": Characteristic,\n    \"addAccessory\": this.addAccessory.bind(this),\n    \"addService\": this.addService.bind(this),\n    \"removeAccessory\": this.removeAccessory.bind(this),\n    \"removeService\": this.removeService.bind(this),\n    \"setValue\": this.setValue.bind(this),\n    \"getAccessories\": this.getAccessories.bind(this),\n    \"updateReachability\": this.updateReachability.bind(this),\n    \"setAccessoryInformation\": this.setAccessoryInformation.bind(this)\n  };\n  \n  this.createModel(model_parameters);\n  \n  accessory_parameters = {\n    \"log\": this.log,\n    \"platform_name\": platform_name,\n    \"Service\": Service,\n    \"Characteristic\": Characteristic,\n    \"get\": this.get.bind(this),\n    \"set\": this.set.bind(this),\n    \"identify\": this.identify.bind(this)\n  };\n}\n\nController.prototype.addAccessory = function(api_accessory) {\n\n  var name = api_accessory.name;\n  var service_type = api_accessory.service;\n  var service_name;\n  var ack, message;\n  \n  // backwards compatible\n  if (typeof api_accessory.service_name !== \"undefined\" ) {\n    service_name = api_accessory.service_name;\n  } else {\n    service_name = name;  \n  }\n\n  if (typeof name === \"undefined\") {\n    ack = false; message = \"name undefined.\";\n    \n  } else if (typeof service_type === \"undefined\") {\n    ack = false; message = \"service undefined.\"; \n      \n  } else if (typeof service_name === \"undefined\") {\n    ack = false; message = \"service_name undefined.\";\n    \n  } else if (typeof Service[service_type] === \"undefined\") {\n    ack = false; message = \"service '\" + service_type + \"' undefined.\";\n    \n  } else if (typeof this.accessories[name] !== \"undefined\") {\n    ack = false; message = \"name '\" + name + \"' is already used.\";\n    \n  } else {\n    var uuid = UUIDGen.generate(name);\n    \n    var newAccessory = new HapAccessory(name, uuid);\n    //this.log.debug(\"Controller.addAccessory UUID = %s\", newAccessory.UUID);\n    \n    var i_accessory = new Accessory(accessory_parameters);\n    \n    i_accessory.addService(newAccessory, service_name, service_type);\n    \n    i_accessory.configureAccessory(newAccessory, api_accessory, service_name, service_type);\n    \n    i_accessory.configureIdentity(newAccessory);\n    \n    newAccessory.reachable = true;\n    \n    this.accessories[name] = i_accessory;\n    this.hap_accessories[name] = newAccessory;\n    api.registerPlatformAccessories(plugin_name, platform_name, [newAccessory]);\n    \n    ack = true; message = \"accessory '\" + name + \"', service_name '\" + service_name + \"' is added.\";\n  }\n  \n  if (ack) {\n    var now = new Date().toISOString().slice(0,16);\n    var plugin_v = \"v\" + plugin_version;\n    this.setAccessoryInformation({\"name\":name,\"manufacturer\":plugin_name,\"model\": plugin_v,\"serialnumber\":now}, false);\n  }\n  \n  return {\"topic\": \"addAccessory\", \"ack\": ack, \"message\": message};\n}\n\nController.prototype.addService = function(api_accessory) {\n\n  var name= api_accessory.name;\n  var service_type = api_accessory.service;\n  var service_name = api_accessory.service_name;\n  \n  var ack, message;\n  \n  if (typeof this.hap_accessories[name] === \"undefined\") {\n    ack = false; message = \"accessory '\" + name + \"' undefined.\";\n    \n  } else if (typeof service_name === \"undefined\") {\n    ack = false; message = \"service_name undefined.\";\n    \n  } else if (typeof service_type === \"undefined\") {\n    ack = false; message = \"service undefined.\";\n    \n  } else if (typeof Service[service_type] === \"undefined\") {\n    ack = false; message = \"service '\" + service_type + \"' undefined.\";\n  \n  } else if (this.accessories[name].service_namesList.indexOf(service_name) > -1) {\n    ack = false; message = \"service_name '\" + service_name + \"' is already used.\";\n  \n  } else if (typeof this.hap_accessories[name].context.service_types === \"undefined\") {\n    ack = false; message = \"Please remove the accessory '\" + name + \"'and add it again before adding multiple services\";\n  \n  } else {\n    this.accessories[name].addService(this.hap_accessories[name], service_name, service_type);          \n    this.accessories[name].configureAccessory(this.hap_accessories[name], api_accessory, service_name, service_type);\n    ack = true; message = \"name '\" + name + \"', service_name '\" + service_name + \"', service '\" + service_type + \"' is added.\";\n  }\n  \n  return {\"topic\": \"addService\", \"ack\": ack, \"message\": message};\n}\n\nController.prototype.configureAccessory = function(accessory) {\n\n  //this.log.debug(\"Controller.configureAccessory %s\", JSON.stringify(accessory, null, 2));\n  \n  var name = accessory.displayName;\n  var uuid = accessory.UUID;\n  \n  if (this.accessories[name]) {\n    this.log.error(\"Controller.configureAccessory %s UUID %s already used.\", name, uuid);\n    process.exit(1);\n  }\n  \n  accessory.reachable = true;\n    \n  var i_accessory = new Accessory(accessory_parameters);\n  \n  i_accessory.configureAccessory(accessory);\n  i_accessory.configureIdentity(accessory);\n\n  this.accessories[name] = i_accessory;\n  this.hap_accessories[name] = accessory;\n}\n\nController.prototype.removeAccessory = function(name) {\n\n  var ack, message;\n  \n  if (typeof(this.accessories[name]) === \"undefined\") {\n    ack = false; message = \"accessory '\" + name + \"' not found.\";\n    \n  } else {\n    this.log.debug(\"Controller.removeAccessory '%s'\", name);\n    \n    api.unregisterPlatformAccessories(plugin_name, platform_name, [this.hap_accessories[name]]);\n    delete this.accessories[name];\n    delete this.hap_accessories[name];\n    ack = true; message = \"accessory '\" + name + \"' is removed.\";\n  }\n  \n  return {\"topic\": \"removeAccessory\", \"ack\": ack, \"message\": message};\n}\n\nController.prototype.removeService = function(api_accessory) {\n\n  var ack, message;\n  var name = api_accessory.name;\n  var service_name = api_accessory.service_name;\n  \n  if (typeof(this.accessories[name]) === \"undefined\") {\n    ack = false; message = \"accessory '\" + name + \"' not found.\";\n    \n  } else if (typeof service_name === \"undefined\") {\n    ack = false; message = \"service_name undefined.\";\n  \n  } else if (this.accessories[name].service_namesList.indexOf(service_name) < 0) {\n    ack = false; message = \"accessory '\" + name + \"', service_name '\" + service_name + \"' undefined.\";\n  \n  } else if (typeof this.hap_accessories[name].getServiceByUUIDAndSubType(service_name, service_name) === \"undefined\") {   \n    ack = false; message = \"accessory '\" + name + \"', service_name '\" + service_name + \"' not found.\";\n  \n  } else {\n    this.hap_accessories[name].removeService(this.accessories[name].services[service_name]);\n    this.accessories[name].removeService(service_name);\n    \n    //this.log.debug(\"Controller.removeService '%s' '%s'\", name, service_name);    \n    ack = true; message = \"accessory '\" + name + \"' service_name '\" + service_name + \"' is removed.\";\n  }\n\n  return {\"topic\": \"addService\", \"ack\": ack, \"message\": message};  \n}\n\nController.prototype.updateReachability = function(accessory) {\n  \n  var ack, message;\n  var name = accessory.name;\n  var reachable = accessory.reachable;\n  //this.log.debug(\"Controller.updateReachability %s %s\", name, reachable);\n    \n  if (typeof name === \"undefined\") {\n    ack = false; message = \"name undefined.\";\n    \n  } else if (typeof reachable === \"undefined\") {\n    ack = false; message = \"reachable undefined.\";\n    \n  } else if (typeof(this.accessories[name]) === \"undefined\") {\n    ack = false; message = \"accessory '\" + name + \"' not found.\";\n  \n  } else {\n    this.log.debug(\"Controller.updateReachability '%s'\", name);\n    \n    this.accessories[name].reachable = reachable;\n    this.hap_accessories[name].updateReachability(reachable);\n    \n    ack = true; message = \"accessory '\" + name + \"' reachability set to \" + reachable;\n  }\n\n  return {\"topic\": \"updateReachability\", \"ack\": ack, \"message\": message};\n}\n\nController.prototype.setAccessoryInformation = function(accessory) {\n\n  this.log.debug(\"Controller.setAccessoryInformation %s\", JSON.stringify(accessory));\n  var message;\n  var ack;\n  var name = accessory.name;\n  \n  if (typeof this.hap_accessories[name] === \"undefined\") {\n    ack = false; message = \"accessory '\" + name + \"' undefined.\";\n  } else {\n    var service = this.hap_accessories[name].getService(Service.AccessoryInformation);\n    \n    if (typeof accessory.manufacturer !== \"undefined\") {\n      service.setCharacteristic(Characteristic.Manufacturer, accessory.manufacturer);\n      ack = true;\n    }\n    if (typeof accessory.model !== \"undefined\") {\n      service.setCharacteristic(Characteristic.Model, accessory.model);\n      ack = true;\n    }\n    if (typeof accessory.serialnumber !== \"undefined\") {\n      service.setCharacteristic(Characteristic.SerialNumber, accessory.serialnumber);\n      ack = true;\n    }\n    \n    if (ack) {\n      message = \"accessory '\" + name + \"', accessoryinformation is set.\";\n    } else {\n      message = \"accessory '\" + name + \"', accessoryinforrmation properties undefined.\";\n    }   \n  }\n  \n  return {\"topic\": \"setAccessoryInformation\", \"ack\": ack, \"message\": message};\n}\n\nController.prototype.getAccessories = function(api_accessory) {\n\n  var name;\n  var accessories = {};\n  var service, characteristics;\n  var ack, message;\n  \n  if (typeof api_accessory.name !== \"undefined\") {\n    name = api_accessory.name;\n  } else {\n    name = \"*\";\n  }\n  \n  if (name !== \"*\" && typeof(this.accessories[name]) === \"undefined\") {\n    ack = false; message = \"name '\" + name + \"' undefined.\";\n    \n  } else {\n    switch (name) {\n      case \"*\":\n      case \"all\":\n        for (var k in this.accessories) {\n          //this.log.debug(\"Controller.getAccessories %s\", JSON.stringify(this.accessories[k], null, 2));\n          service = this.accessories[k].service_types;\n          characteristics =  this.accessories[k].i_value;\n          accessories[k] = {\"services\": service, \"characteristics\": characteristics};\n        }\n      break;\n      \n      default:\n        service = this.accessories[name].service_types;\n        characteristics =  this.accessories[name].i_value;\n        accessories[name] = {\"services\": service, \"characteristics\": characteristics};\n    }\n    ack = true; message = \"name '\" + name + \"' valid.\";\n  }\n  \n  return {\"topic\": \"getAccessories\", \"ack\": ack, \"message\": message, \"accessories\": accessories};\n}\n\n//\n// Model functions\n//\n\nController.prototype.createModel = function (model_parameters) {\n\n  this.Model = new Model(model_parameters);\n}\n\nController.prototype.start = function () {\n \n  this.log.debug(\"Controller.start\");\n  this.Model.start();\n}\n\nController.prototype.get = function (name, service_name, c, callback) {\n\n  this.Model.get(name, service_name, c, callback);\n}\n\nController.prototype.set = function (name, service_name, c, value, callback) {\n\n  this.Model.set(name, service_name, c, value, callback);\n}\n\nController.prototype.setValue = function (api_accessory) {\n\n  var ack, message;\n  var result = {};\n  \n  result = this.validate(api_accessory);\n  \n  if (!result.isValid) {\n    ack = false; message = result.message;\n    this.log.debug(\"Controller.setValue %s\", message);\n  \n  } else {\n    result = this.accessories[api_accessory.name].save_and_setValue(platform_name, result.service_name, api_accessory.characteristic, result.value);\n    \n    if (!result.isValid) {\n      ack = false; message = \"name '\" + api_accessory.name + \"', value '\" + result.value + \"' outside range\";\n      this.log.debug(\"Controller.setValue %s\", message);\n          \n    } else {\n      ack = true; message = \"name '\" + api_accessory.name + \"' valid.\";\n    }\n  }\n  //this.log.debug(\"Controller.setValue %s %s\", ack, message);\n  return {\"topic\": \"setValue\", \"ack\": ack, \"message\": message};\n}\n\nController.prototype.identify = function (name) {\n\n  var manufacturer = this.hap_accessories[name].getService(Service.AccessoryInformation).getCharacteristic(\"Manufacturer\").value;\n  var model = this.hap_accessories[name].getService(Service.AccessoryInformation).getCharacteristic(\"Model\").value;\n  var serialnumber = this.hap_accessories[name].getService(Service.AccessoryInformation).getCharacteristic(\"Serial Number\").value;\n\n  this.log(\"identify name '%s' manufacturer '%s' model '%s' serialnumber '%s'\", name, manufacturer, model, serialnumber);\n    \n  this.Model.identify(name, manufacturer, model, serialnumber);\n}\n\nController.prototype.validate = function(api_accessory) {\n\n  var name = api_accessory.name;\n  var service_name = api_accessory.service_name;\n  var c = api_accessory.characteristic;\n  var value = api_accessory.value;\n  \n  var ack;\n  var message = \"\";\n  \n  // backwards compatible\n  if (typeof service_name === \"undefined\") {\n    service_name = name;\n    if (typeof this.accessories[name].services[service_name] === \"undefined\") {\n      ack = false; message = \"name '\" + name + \"', service_name '\" + service_name + \"' undefined.\";\n      this.log.debug(\"Controller.validate %s\", message);\n      return {isValid: ack, message: message, service_name: service_name, value: value};\n    }\n  }\n  \n  if(typeof(this.accessories[name]) === \"undefined\") {\n    ack = false; message = \"name '\" + name + \"' undefined.\";\n    \n  } else if (typeof(Characteristic[c]) !== \"function\") {\n    ack = false; message = \"characteristic '\" + c + \"' undefined.\";\n    \n  } else if (typeof(api_accessory.value) === \"undefined\" || api_accessory.value === null) {\n    ack = false; message = \"name '\" + name + \"' value undefined.\";\n    \n  } else if (typeof this.accessories[name].services[service_name] == \"undefined\") {\n    ack = false; message = \"name '\" + name + \"', service_name '\" + service_name + \"' undefined.\";\n    \n  } else if (typeof(this.accessories[name].services[service_name].getCharacteristic(Characteristic[c])) === \"undefined\") {\n    message = \"name '\" + name + \"' service_name '\" + service_name + \"' characteristic do not match.\";\n    \n  } else {\n    ack = true; message = \"name '\" + name + \"' valid.\";\n  }\n  \n  return {isValid: ack, message: message, service_name: service_name, value: value};\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-mqtt/node_modules/homebridge-mqtt/lib/accessory.js":"'use strict';\n\nvar Utils = require('./utils.js').Utils;\n\nvar Service, Characteristic, platform_name, get, set, identify;\n\nNumber.prototype.pad = function (len) {\n    return (new Array(len+1).join(\"0\") + this).slice(-len);\n}\n\nmodule.exports = {\n  Accessory: Accessory\n}\n\nfunction Accessory(params) {\n     \n  this.log = params.log;\n  Service = params.Service;\n  Characteristic = params.Characteristic;\n  platform_name = params.platform_name;\n  get = params.get;\n  set = params.set;\n  identify = params.identify;\n   \n  this.name;          // assigned by this.configureAccessory\n\n  this.i_value = {}; \n  this.i_label = {};\n  this.i_props = {};\n  \n  this.reachable = true;\n  \n  this.services = {};\n  this.service_types = {};\n  this.service_names = {};\n  this.service_namesList = [];\n  \n  this.set_timeout;\n  this.prec_c;\n}\n\n//\n// configuration\n//\n\nAccessory.prototype.addService = function(accessory, service_name, service_type) {\n\n  accessory.addService(Service[service_type], service_name, service_name);\n  \n  this.service_types[service_name] = service_type;\n  \n  if (typeof accessory.context.service_types === \"undefined\") {\n    accessory.context.service_types = {};\n  }\n  accessory.context.service_types[service_name] = service_type;\n}\n\nAccessory.prototype.removeService = function(service_name) {\n\n  this.log.debug(\"Accessory.removeService %s %s\", this.name, service_name);\n    \n  delete this.services[service_name];\n  delete this.service_types[service_name];\n  delete this.service_names[service_name];\n  \n  delete this.i_value[service_name];\n  delete this.i_props[service_name];\n  delete this.i_label[service_name];\n  this.service_namesList.pop(service_name);\n}\n\nAccessory.prototype.addService_name = function(service_name) {\n\n  this.i_value[service_name] = {};\n  this.i_props[service_name] = {};\n  this.i_label[service_name] = {};\n  this.service_namesList.push(service_name);\n}\n\nAccessory.prototype.configureAccessory = function(accessory, api_accessory, service_name, service_type) {\n\n  if (typeof api_accessory !== \"undefined\") {  // new accessory\n    this.name = api_accessory.name;\n    \n    this.log.debug(\"Accessory.configureAccessory '%s' '%s' '%s'\", this.name, service_name, service_type);\n    \n    this.services[service_name] = accessory.getServiceByUUIDAndSubType(service_name, service_name);\n    //this.services[service_name] = accessory.getService(service_name);\n    \n    this.addService_name(service_name);\n    this.configureCharacteristics(accessory, api_accessory, service_name);\n    this.configureOptionalCharacteristics(accessory, api_accessory, service_name);\n        \n  } else { // cachedAccessories\n    this.name = accessory.displayName;\n    \n    for (var k in accessory.services) {\n      if (typeof accessory.services[k].displayName !== \"undefined\") {\n        service_name = accessory.services[k].displayName;\n        \n        this.services[service_name] = accessory.getServiceByUUIDAndSubType(service_name, service_name);\n        \n        // backwards compatible\n        if (typeof this.services[service_name] === \"undefined\" ) {\n          this.services[service_name] = accessory.getService(service_name);\n          this.log.debug(\"Accessory.configureAccessory [v0.2.4] '%s' '%s'\", this.name, this.services[service_name].displayName);\n        } else {\n          this.log.debug(\"Accessory.configureAccessory '%s' '%s'\", this.name, service_name);\n        }\n        \n        this.addService_name(service_name);\n        this.configureCharacteristics(accessory, api_accessory, service_name);\n        //this.log.debug(\"Accessory.configureAccessory %s\", JSON.stringify(this.services[service_name], null, 2));\n      }\n    }\n    \n    if (typeof accessory.context.service_types !== \"undefined\") {\n      for (var k in accessory.context.service_types) {\n        this.service_types[k] = accessory.context.service_types[k];\n      }\n    } else {\n      // backwards compatible\n      if (typeof accessory.context.service_name !== \"undefined\") {\n        this.service_types[this.name] = accessory.context.service_name;\n      }\n    }\n  }\n  //this.log.debug(\"Accessory.configureAccessory %s\", JSON.stringify(accessory, null, 2));\n}\n\nAccessory.prototype.configureCharacteristics = function(accessory, api_accessory, service_name) {\n\n  var c;\n  var service = this.services[service_name];\n  \n  for (var k in service.characteristics) {\n  \n    c = service.characteristics[k].displayName.replace(/\\s/g, \"\");\n    //this.log.debug(\"Accessory.configureCharacteristics %s %s %s\", this.name, service_name, c);\n    \n    if (c != \"Name\") {\n      this.allocate(service, c);\n      if (typeof api_accessory !== \"undefined\") {\n        this.setProps(service, c, api_accessory);\n      }\n      this.i_value[service_name][c] = \"blank\";\n      this.i_props[service_name][c] = JSON.parse(JSON.stringify(service.getCharacteristic(Characteristic[c]).props));\n      //this.log.debug(\"Accessory.configureCharacteristics %s %s %s %s\", this.name, service_name, c, JSON.stringify(this.i_props));\n    }\n  }\n  //this.log.debug(\"Accessory.configureCharacteristics %s\", JSON.stringify(api_accessory[c]));\n}\n\nAccessory.prototype.configureOptionalCharacteristics = function(accessory, api_accessory, service_name) {\n\n  var c;\n  var service = this.services[service_name];\n    \n  // note: if the accessories are restored from cachedAccessories, the optionalCharacteristics are stored in characteristics.\n  for (var k in service.optionalCharacteristics) {\n    \n    c = service.optionalCharacteristics[k].displayName.replace(/\\s/g, \"\");\n    \n    if (typeof(api_accessory[c]) !== \"undefined\") {\n      this.log.debug(\"Accessory.configureCharacteristics %s %s optional %s\", this.name, service_name, c);\n      \n      if (c != \"Name\") {\n        this.allocate(service, c);\n        this.setProps(service, c, api_accessory);\n        this.i_value[service_name][c] = \"blank\";\n        this.i_props[service_name][c] = JSON.parse(JSON.stringify(service.getCharacteristic(Characteristic[c]).props));\n      }\n    }\n  }\n}\n\nAccessory.prototype.allocate = function(service, c) {\n\n  var self = this;\n  var sc = service.getCharacteristic(Characteristic[c]);\n  \n  sc.on('get', function(callback, context) {self.get(callback, context, this.displayName, this.iid)});\n  if (sc.props.perms.indexOf(\"pw\") > -1) { \n    //this.log.debug(\"Accessory.allocate 'set' event %s %s\", this.name, c);\n    sc.on('set', function(value, callback, context) {self.set(value, callback, context, this.displayName, this.iid)});\n  }\n}\n\nAccessory.prototype.setProps = function(service, c, api_accessory) {\n\n  // only for newAccessories\n  if (typeof(api_accessory[c]) !== \"undefined\") {\n    if (api_accessory[c] != \"default\") {\n      service.getCharacteristic(Characteristic[c]).setProps(api_accessory[c]);\n    }\n    //this.log.debug(\"Accessory.setProps %s %s %s\", this.name, c, api_accessory[c]);\n  }\n}\n\nAccessory.prototype.getService_names = function() {\n \n  var service_name;\n  \n  this.log.debug(\"Accessory.getService_names\");\n  for (var k in this.services) {\n    for (var i in this.services[k].characteristics) {\n      if (this.services[k].characteristics[i].displayName !== \"Name\") {\n        this.service_names[this.services[k].characteristics[i].iid] = this.services[k].displayName;\n        this.log.debug(\"Accessory.getService_names [iid %s] %s '%s' '%s'\", this.services[k].characteristics[i].iid, this.name, this.services[k].characteristics[i].displayName, this.services[k].displayName);\n      }\n    }\n  }\n  //this.log.debug(\"Accessory.getService_names \\n%s\", JSON.stringify(this.service_names));\n}\n\nAccessory.prototype.configureIdentity = function(accessory) {\n\n  accessory.on('identify', function(paired, callback) {this.identify(paired, callback)}.bind(this));\n}\n\n//\n// from HomeKit functions\n//\n\nAccessory.prototype.get = function(callback, context, displayName, iid) {\n   \n  if (this.reachable) {\n    var c = displayName.replace(/\\s/g, \"\");\n    //this.log.debug(\"Accessory.get %s '%s' '%s'\", this.name, iid, c);\n    \n    if (typeof this.service_names[iid] === \"undefined\") {\n      this.getService_names();\n    }\n    var service_name = this.service_names[iid];\n    \n    this.log.debug(\"Accessory.get [iid %s] '%s' '%s' '%s'\", iid, this.name, service_name, c);\n    get(this.name, service_name, c, callback);\n    \n    var value;\n    if (typeof(this.i_value[service_name][c]) !== \"undefined\" && this.i_value[service_name][c] !== \"blank\") {\n      value = this.i_value[service_name][c];\n    } else {\n      value = null;\n    }\n    //this.log.debug(\"Accessory.get %s %s %s\", this.name, c, value);\n    callback(null, value);\n  } else {\n    callback(\"no_response\");\n  }\n}\n\nAccessory.prototype.set = function(value, callback, context, displayName, iid) {\n\n  if (this.reachable) {\n    var c = displayName.replace(/\\s/g, \"\");\n    //this.log.debug(\"Accessory.set %s '%s' '%s' %s\", this.name, iid, c, value);  \n    \n    if (typeof this.service_names[iid] === \"undefined\") {\n      this.getService_names();\n    }\n    var service_name = this.service_names[iid];\n        \n    if (c == \"On\") value = (value == 0 || value == false) ? false : true;\n    this.i_value[service_name][c] = value;\n    \n    if (typeof(context) !== \"undefined\" && typeof(context.trigger) === \"undefined\") {\n      this.setLabel(\"homekit\", service_name, c);\n    }\n\n    if (typeof(context) !== \"undefined\" && typeof(context.trigger) !== \"undefined\" && context.trigger.includes(platform_name)) {\n      callback();\n    } else {\n      this.log.debug(\"Accessory.set [iid %s] '%s' '%s' '%s' %s\", iid, this.name, service_name, c, value);\n      switch (c) {\n        case \"Brightness\":\n        case \"TargetPosition\":\n        case \"TargetHorizontalTiltAngle\":\n        case \"TargetVerticalTiltAngle\":\n        case \"TargetRelativeHumidity\":\n        case \"TargetTemperature\":\n          if (this.set_timeout && c === this.pre_c) {\n            clearTimeout(this.set_timeout);\n          }\n          this.set_timeout = setTimeout(function() {\n            set(this.name, service_name, c, value, callback);\n          }.bind(this), 250);\n          this.pre_c = c;\n          break;\n          \n        default:\n          set(this.name, service_name, c, value, callback);\n      }\n    }\n  } else {\n    callback(\"no_response\");\n  }\n}\n\nAccessory.prototype.identify = function (paired, callback) {\n \n  identify(this.name);\n  callback();\n}\n\n//\n// to HomeKit and value-handling functions\n//\n\nAccessory.prototype.save_and_setValue = function (trigger, service_name, c, value) {\n  \n  var result = {};\n  \n  result = this.parseValue(service_name, c, value);\n\n  if (result.isValid) {\n    //this.log.debug(\"Accessory.save_and_setValue '%s' '%s' '%s' %s\", this.name, service_name, c, value);\n    this.i_value[service_name][c] = result.value;\n    this.setLabel(trigger, service_name, c);\n  \n    var context = this.i_label[service_name][c];\n    //context is also used by the hap-server ('get' and 'set' event) - \"context\": {\"keepalive\":true, ...\n    //this.log.debug(\"Accessory.save_and_setValue %s %s %s %s %s \", trigger, this.name, c, result.value, JSON.stringify(context));\n\n    // todo: to clarify\n    // A function to only updating the remote value, but not firiring the 'set' event.\n    // Service.prototype.updateCharacteristic = function(name, value)\n    \n    if (typeof(context) !== \"undefined\") {\n      this.services[service_name].getCharacteristic(Characteristic[c]).setValue(result.value, null, context);\n    }\n    else {\n      this.services[service_name].getCharacteristic(Characteristic[c]).setValue(result.value);\n    }\n  }\n  \n  return result;\n}\n\nAccessory.prototype.parseValue = function(service_name, c, value) {\n\n  var isValid = true;\n  \n  //this.log.debug(\"Accessory.parseValue %s %s\", service_name, c);\n  \n  var sc = this.services[service_name].getCharacteristic(Characteristic[c]);\n  //this.log.debug(\"Accessory.parseValue %s %s\", c, JSON.stringify(sc));\n   \n  switch (sc.props.format) {\n    case \"bool\":\n      value = (value == 0 || value == false) ? false : true;\n      break;\n      \n    case \"int\":\n    case \"uint8\":\n    case \"uint16\":\n    case \"unit32\":\n      value = parseInt(value);\n      if (value < sc.props.minValue || value > sc.props.maxalue) {\n        this.log.debug(\"Accessory.parseInt %s %s value '%s' outside range.\", this.name, c, value);\n        isValid = false;\n      }\n      break;\n      \n    case \"float\":\n      value = parseFloat(value);\n      if (value < sc.props.minValue || value > sc.props.maxalue) {\n        this.log.debug(\"Accessory.parseFloat %s %s value '%s' outside range.\", this.name, c, value);\n        isValid = false;\n      }\n      break;\n      \n    default:\n      // string, tlv8, \n      value = undefined;\n      this.log.warn(\"Accessory.parseValue %s %s %s %s\", name, c, value, JSON.stringify(sc.props));\n  }\n  return {isValid: isValid, value: value};\n}\n\nAccessory.prototype.setLabel = function(trigger, service_name, c) {\n\n  var now = new Date();\n  var timestamp = now.getHours().pad(2)+\":\"+now.getMinutes().pad(2)+\":\"+now.getSeconds().pad(2);\n   // +\",\"+now.getMilliseconds(); \n  \n  this.i_label[service_name][c] = {\n    \"timestamp\": timestamp,\n    \"trigger\": trigger\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-mqtt/node_modules/homebridge-mqtt/lib/model.js":"'use strict';\n\nvar mqtt = require('mqtt');\nvar Utils = require('./utils.js').Utils;\n\nvar plugin_name, topic_prefix, Characteristic;\nvar addAccessory, addService, removeAccessory, removeService, setValue, getAccessories, updateReachability, setAccessoryInformation;\nvar set_timeout, client;\n\nmodule.exports = {\n  Model: Model\n}\n\nfunction Model(params) {\n\n  this.config = params.config;\n  this.log = params.log;\n  plugin_name = params.plugin_name;\n  Characteristic = params.Characteristic;\n  \n  addAccessory = params.addAccessory;\n  addService = params.addService;\n  removeAccessory = params.removeAccessory;\n  removeService = params.removeService;\n  setValue = params.setValue;\n  getAccessories = params.getAccessories;\n  updateReachability = params.updateReachability;\n  setAccessoryInformation = params.setAccessoryInformation;\n}\n\nModel.prototype.start = function() {\n\n  var url = this.config.url;\n  \n  var options = {};\n  // experimental\n  this.publish_options = {};\n  \n  topic_prefix = this.config.topic_prefix || \"homebridge\";\n  \n  options.username = this.config.username || null;\n  options.password = this.config.password || null;\n\n  this.publish_options = {retain: this.config.retain || false};\n  //this.log.debug(\"connect options %s\", JSON.stringify(this.publish_options));\n  \n  if(options.username === null || options.password === null) {\n    this.log(\"connect Anonymous\");\n    client = mqtt.connect(url);\n  } else {\n    this.log(\"connect Authentication with username/password\");\n    client = mqtt.connect(url, options);\n  }\n  \n  var timeout = setTimeout(function() {\n    if (!client.connected) {\n      this.log.error(\"connect error! (url = %s)\", url);\n    }\n  }.bind(this), 5000);\n  \n  client.on('connect', function () {\n  \n    this.log(\"connected (url = %s)\", url);\n    if (this.config.username) this.log.debug(\"on.connect %s %s\", this.config.username, this.config.password);\n    \n    var topic = topic_prefix + '/to/#';\n    client.subscribe(topic);\n    this.log.debug(\"on.connect subscribe %s\", topic);\n\n    var plugin_version = Utils.readPluginVersion();\n    var msg = plugin_name + \" v\" + plugin_version + \" started\";\n    this.log.debug(\"on.connect %s\", msg);\n    \n    client.publish(topic_prefix + '/from/connected', msg, this.publish_options);\n  }.bind(this));\n  \n  client.on('message', function (topic, buffer) {\n\n    var payload = buffer.toString();\n    var message, accessory;\n    var result, isValid;\n    \n    if (typeof topic === \"undefined\" || payload.length === 0) {\n      message = \"topic or payload invalid\";\n      this.log.debug(\"on.message %s\", message);\n      this.sendAck(false, message);\n    } else {\n    \n      //this.log.debug(\"on.message topic %s payload %s\", topic, payload);\n      \n      try {\n        accessory = JSON.parse(payload);\n        \n        if (typeof accessory.subtype !== \"undefined\") {\n          message = \"Please replace 'subtype' by 'service_name'\";\n          this.log.debug(\"on.message %s\", message);\n          this.sendAck(false, message);\n          isValid = false;\n        } else {\n          isValid = true;\n        }\n      } catch(e) {\n        message = \"invalid JSON format\";\n        this.log.debug(\"on.message %s (%s)\", message, e.message);\n        this.sendAck(false, message);\n        isValid = false;\n      }\n\n      if (isValid) {\n        switch (topic) {\n          case topic_prefix + \"/to/add\":\n          case topic_prefix + \"/to/add/accessory\":\n            this.log.debug(\"on.message add \\n%s\", JSON.stringify(accessory, null, 2));\n            result = addAccessory(accessory);\n            this.handle(result);\n            break;\n\n          case topic_prefix + \"/to/add/service\":\n          case topic_prefix + \"/to/add/services\":\n            this.log.debug(\"on.message add/service \\n%s\", JSON.stringify(accessory, null, 2));\n            result = addService(accessory);\n            this.handle(result);\n            break;\n\n          case topic_prefix + \"/to/set/reachability\":\n          case topic_prefix + \"/to/set/reachable\":\n            if (typeof accessory.reachable === \"boolean\") {\n              result = updateReachability(accessory);\n              this.handle(result);\n            } else {\n              message = \"accessory '\" + accessory.name + \"' reachable not boolean.\";\n              this.log.warn(\"on.message %s\", message);\n              this.sendAck(false, message);\n            }\n            break;\n            \n          case topic_prefix + \"/to/set/accessoryinformation\":\n          case topic_prefix + \"/to/set/information\":\n            result = setAccessoryInformation(accessory);\n            this.handle(result);\n            break;\n            \n          case topic_prefix + \"/to/remove\":\n          case topic_prefix + \"/to/remove/accessory\":\n            result = removeAccessory(accessory.name);\n            this.handle(result);\n            break;\n            \n          case topic_prefix + \"/to/remove/service\":\n            result = removeService(accessory);\n            this.handle(result);\n            break;\n            \n          case topic_prefix + \"/to/set\":\n            result = setValue(accessory);\n            if (!result.ack) {\n              this.handle(result);\n            }\n            break;\n\n          case topic_prefix + \"/to/get\":\n            result = getAccessories(accessory);\n            if (result.ack) {\n              this.sendAccessories(result.accessories);\n            } else {\n              this.handle(result);\n            }\n            break;\n\n          default:\n            message = \"topic '\" + topic + \"' unkown.\";\n            this.log.warn(\"on.message default %s\", message);\n            this.sendAck(false, message);\n        }\n      }\n    }\n  }.bind(this));\n  \n  client.on('error', function (error) {\n    this.log.error(\"on.error %s\", error);\n  }.bind(this));\n  \n  client.on('reconnect', function () {\n    this.log.debug(\"  <to analyze> on.reconnect\");\n  }.bind(this));\n  \n  client.on('close', function () {\n    this.log.debug(\"  <to analyze> on.close\");\n  }.bind(this));\n\n  client.on('offline', function () {\n    this.log.debug(\"  <to analyze> on.offline\");\n  }.bind(this));\n \n}\n\nModel.prototype.get = function(name, service_name, c, callback) {\n\n  //this.log.debug(\"get '%s' '%s' '%s'\", name, service_name, c);\n  var msg = {\"name\": name, \"service_name\": service_name, \"characteristic\": c};\n  client.publish(topic_prefix + '/from/get', JSON.stringify(msg), this.publish_options);\n  // callback(null, null);  // not used\n}\n\nModel.prototype.set = function(name, service_name, c, value, callback) {\n     \n  //this.log.debug(\"set '%s' '%s' '%s' %s\", name, service_name, c, value);\n  var msg = {\"name\": name, \"service_name\": service_name, \"characteristic\": c, \"value\": value};\n\n  client.publish(topic_prefix + '/from/set', JSON.stringify(msg), this.publish_options);\n  callback();\n}\n\nModel.prototype.identify = function (name, manufacturer, model, serialnumber) {\n\n  var msg = {\"name\": name, \"manufacturer\": manufacturer, \"model\": model, \"serialnumber\": serialnumber};\n  this.log.debug(\"identify %s\", JSON.stringify(msg));\n  client.publish(topic_prefix + '/from/identify', JSON.stringify(msg), this.publish_options);\n}\n\nModel.prototype.sendAccessories = function (accessories) {\n\n  var msg = accessories;\n  this.log.debug(\"sendAccessories \\n%s\", JSON.stringify(msg, null, 2));\n  client.publish(topic_prefix + '/from/response', JSON.stringify(msg), this.publish_options);\n}\n\nModel.prototype.handle = function (result) {\n\n  this.sendAck(result.ack, result.message);\n  this.log(\"%s %s, %s\", result.topic, result.ack, result.message);\n}\n\nModel.prototype.sendAck = function (ack, message) {\n\n  var msg = {\"ack\": ack, \"message\": message};\n  //this.log.debug(\"sendAck %s\", JSON.stringify(msg));\n  client.publish(topic_prefix + '/from/response', JSON.stringify(msg), this.publish_options);\n}\n"}